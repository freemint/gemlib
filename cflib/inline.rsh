/*
 * GEM resource C output of inline
 *
 * created by ORCS 2.15
 */

#ifdef OS_WINDOWS
#  include <portaes.h>
#  define SHORT _WORD
#  ifdef __WIN32__
#    define _WORD signed short
#  else
#    define _WORD signed int
 #   pragma option -zE_FARDATA
#  endif
#else
#  ifdef __TURBOC__
#    include <portaes.h>
#    define CP (_WORD *)
#  endif
#endif

#ifdef OS_UNIX
#  include <portaes.h>
#  define SHORT _WORD
#else
#  ifdef __GNUC__
#    ifndef __PORTAES_H__
#      if __GNUC__ < 4
#        include <aesbind.h>
#        ifndef _WORD
#          define _WORD int
#        endif
#        define CP (char *)
#      else
#        include <mt_gem.h>
#        ifndef _WORD
#          define _WORD short
#        endif
#        define CP (short *)
#      endif
#      define CW (short *)
#    endif
#  endif
#endif


#ifdef __SOZOBONX__
#  include <xgemfast.h>
#else
#  ifdef SOZOBON
#    include <aes.h>
#  endif
#endif

#ifdef MEGAMAX
#  include <gembind.h>
#  include <gemdefs.h>
#  include <obdefs.h>
#  define _WORD int
#  define SHORT int
#endif

#ifndef OS_NORMAL
#  define OS_NORMAL 0x0000
#endif
#ifndef OS_SELECTED
#  define OS_SELECTED 0x0001
#endif
#ifndef OS_CROSSED
#  define OS_CROSSED 0x0002
#endif
#ifndef OS_CHECKED
#  define OS_CHECKED 0x0004
#endif
#ifndef OS_DISABLED
#  define OS_DISABLED 0x0008
#endif
#ifndef OS_OUTLINED
#  define OS_OUTLINED 0x0010
#endif
#ifndef OS_SHADOWED
#  define OS_SHADOWED 0x0020
#endif
#ifndef OS_WHITEBAK
#  define OS_WHITEBAK 0x0040
#endif
#ifndef OS_DRAW3D
#  define OS_DRAW3D 0x0080
#endif

#ifndef OF_NONE
#  define OF_NONE 0x0000
#endif
#ifndef OF_SELECTABLE
#  define OF_SELECTABLE 0x0001
#endif
#ifndef OF_DEFAULT
#  define OF_DEFAULT 0x0002
#endif
#ifndef OF_EXIT
#  define OF_EXIT 0x0004
#endif
#ifndef OF_EDITABLE
#  define OF_EDITABLE 0x0008
#endif
#ifndef OF_RBUTTON
#  define OF_RBUTTON 0x0010
#endif
#ifndef OF_LASTOB
#  define OF_LASTOB 0x0020
#endif
#ifndef OF_TOUCHEXIT
#  define OF_TOUCHEXIT 0x0040
#endif
#ifndef OF_HIDETREE
#  define OF_HIDETREE 0x0080
#endif
#ifndef OF_INDIRECT
#  define OF_INDIRECT 0x0100
#endif
#ifndef OF_FL3DIND
#  define OF_FL3DIND 0x0200
#endif
#ifndef OF_FL3DBAK
#  define OF_FL3DBAK 0x0400
#endif
#ifndef OF_FL3DACT
#  define OF_FL3DACT 0x0600
#endif
#ifndef OF_MOVEABLE
#  define OF_MOVEABLE 0x0800
#endif
#ifndef OF_POPUP
#  define OF_POPUP 0x1000
#endif

#ifndef R_CICONBLK
#  define R_CICONBLK 17
#endif
#ifndef R_CICON
#  define R_CICON 18
#endif

#ifndef G_SWBUTTON
#  define G_SWBUTTON 34
#endif
#ifndef G_POPUP
#  define G_POPUP 35
#endif
#ifndef G_EDIT
#  define G_EDIT 37
#endif
#ifndef G_SHORTCUT
#  define G_SHORTCUT 38
#endif
#ifndef G_SLIST
#  define G_SLIST 39
#endif
#ifndef G_EXTBOX
#  define G_EXTBOX 40
#endif
#ifndef G_OBLINK
#  define G_OBLINK 41
#endif

#ifndef _WORD
#  ifdef WORD
#    define _WORD WORD
#  else
#    define _WORD short
#  endif
#endif

#ifndef _UBYTE
#  define _UBYTE char
#endif

#ifndef _LONG
#  ifdef LONG
#    define _LONG LONG
#  else
#    define _LONG long
#  endif
#endif

#ifndef _LONG_PTR
#  define _LONG_PTR _LONG
#endif

#ifndef C_UNION
#ifdef __PORTAES_H__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __GEMLIB__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __PUREC__
#  define C_UNION(x) { (_LONG_PTR)(x) }
#endif
#ifdef __ALCYON__
#  define C_UNION(x) x
#endif
#endif
#ifndef C_UNION
#  define C_UNION(x) (_LONG_PTR)(x)
#endif

#ifndef SHORT
#  define SHORT short
#endif

#ifndef CP
#  define CP (SHORT *)
#endif

#ifndef CW
#  define CW (_WORD *)
#endif


#undef RSC_STATIC_FILE
#define RSC_STATIC_FILE 1

#include "inline.h"

#ifndef RSC_NAMED_FUNCTIONS
#  define RSC_NAMED_FUNCTIONS 0
#endif

#ifndef __ALCYON__
#undef defRSHInit
#undef defRSHInitBit
#undef defRSHInitStr
#ifndef RsArraySize
#define RsArraySize(array) (_WORD)(sizeof(array)/sizeof(array[0]))
#define RsPtrArraySize(type, array) (type *)array, RsArraySize(array)
#endif
#define defRSHInit( aa, bb ) RSHInit( aa, bb, RsPtrArraySize(OBJECT *, rs_trindex), RsArraySize(rs_object) )
#define defRSHInitBit( aa, bb ) RSHInitBit( aa, bb, RsPtrArraySize(BITBLK *, rs_frimg) )
#define defRSHInitStr( aa, bb ) RSHInitStr( aa, bb, RsPtrArraySize(_UBYTE *, rs_frstr) )
#endif

#ifdef __STDC__
#ifndef GetTextSize
extern void GetTextSize(_WORD *_width, _WORD *_height);
#endif
#ifndef W_Cicon_Setpalette
extern int W_Cicon_Setpalette(_WORD *_palette);
#endif
#ifndef hrelease_objs
extern void hrelease_objs(OBJECT *_ob, _WORD _num_objs);
#endif
#ifndef hfix_objs
extern void *hfix_objs(RSHDR *_hdr, OBJECT *_ob, _WORD _num_objs);
#endif
#endif

#ifndef RLOCAL
#  if RSC_STATIC_FILE
#    ifdef LOCAL
#      define RLOCAL LOCAL
#    else
#      define RLOCAL static
#    endif
#  else
#    define RLOCAL
#  endif
#endif


#ifndef N_
#  define N_(x)
#endif


#if RSC_STATIC_FILE
#undef NUM_STRINGS
#undef NUM_BB
#undef NUM_IB
#undef NUM_CIB
#undef NUM_CIC
#undef NUM_TI
#undef NUM_FRSTR
#undef NUM_FRIMG
#undef NUM_OBS
#undef NUM_TREE
#undef NUM_UD
#define NUM_STRINGS 23
#define NUM_BB		4
#define NUM_IB		0
#define NUM_CIB     4
#define NUM_CIC     8
#define NUM_TI		2
#define NUM_FRSTR	0
#define NUM_FRIMG	0
#define NUM_OBS     27
#define NUM_TREE	3
#define NUM_UD		0
#endif


static char inline_string_0[] = "xxxxxxxxxxxxxxxxxx20";
static char inline_string_1[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx40";
static char inline_string_2[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx40";
static char inline_string_3[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx40";
static char inline_string_4[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx40";
static char inline_string_5[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx40";
static char inline_string_6[] = "xxxxxxxxxxxxx15";
static char inline_string_7[] = "xxxxxxxxxxxxx15";
static char inline_string_8[] = "xxxxxxxxxxxxx15";
static char inline_string_9[] = "Zeichenauswahl";
static char inline_string_10[] = "Dez:";
static char inline_string_11[] = "012";
static char inline_string_12[] = "";
static char inline_string_13[] = "";
static char inline_string_14[] = "Hex:";
static char inline_string_15[] = "0xXX";
static char inline_string_16[] = "";
static char inline_string_17[] = "";
static char inline_string_18[] = "Abbruch";
static char inline_string_19[] = "";
static char inline_string_20[] = "";
static char inline_string_21[] = "";
static char inline_string_22[] = "";


/* data of AL_INFO */
static _UBYTE IMAGE0[] = {
0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 
0x7F, 0x80, 0x0F, 0xFE, 0x7F, 0x80, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC};

/* data of AL_ACHT */
static _UBYTE IMAGE1[] = {
0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC};

/* data of AL_QST */
static _UBYTE IMAGE2[] = {
0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xE0, 0x07, 0xFE, 0x7F, 0x80, 0x01, 0xFE, 0x7F, 0x00, 0x00, 0xFE, 0x7E, 0x00, 0x00, 0x7E, 
0x7E, 0x01, 0xC0, 0x7E, 0x7E, 0x03, 0xC0, 0x7E, 0x7F, 0x07, 0x80, 0xFE, 0x7F, 0xFF, 0x01, 0xFE, 
0x7F, 0xFE, 0x01, 0xFE, 0x7F, 0xFC, 0x03, 0xFE, 0x7F, 0xF8, 0x07, 0xFE, 0x7F, 0xF8, 0x07, 0xFE, 
0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFE, 
0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 0x7F, 0xF0, 0x0F, 0xFE, 
0x7F, 0xF8, 0x1F, 0xFE, 0x7F, 0xFC, 0x3F, 0xFE, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0xFC};

/* data of AL_STOP */
static _UBYTE IMAGE3[] = {
0x00, 0x7F, 0xFE, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x01, 0xBF, 0xFD, 0x80, 0x03, 0x7F, 0xFE, 0xC0, 
0x06, 0xFF, 0xFF, 0x60, 0x0D, 0xFF, 0xFF, 0xB0, 0x1B, 0xFF, 0xFF, 0xD8, 0x37, 0xFF, 0xFF, 0xEC, 
0x6F, 0xFF, 0xFF, 0xF6, 0xDF, 0xFF, 0xFF, 0xFB, 0xB1, 0x81, 0x86, 0x0D, 0xA0, 0x81, 0x02, 0x05, 
0xA4, 0xE7, 0x32, 0x65, 0xA7, 0xE7, 0x32, 0x65, 0xA3, 0xE7, 0x32, 0x65, 0xB1, 0xE7, 0x32, 0x05, 
0xB8, 0xE7, 0x32, 0x0D, 0xBC, 0xE7, 0x32, 0x7D, 0xA4, 0xE7, 0x32, 0x7D, 0xA0, 0xE7, 0x02, 0x7D, 
0xB1, 0xE7, 0x86, 0x7D, 0xBF, 0xFF, 0xFF, 0xFD, 0xDF, 0xFF, 0xFF, 0xFB, 0x6F, 0xFF, 0xFF, 0xF6, 
0x37, 0xFF, 0xFF, 0xEC, 0x1B, 0xFF, 0xFF, 0xD8, 0x0D, 0xFF, 0xFF, 0xB0, 0x06, 0xFF, 0xFF, 0x60, 
0x03, 0x7F, 0xFE, 0xC0, 0x01, 0xBF, 0xFD, 0x80, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x7F, 0xFE, 0x00};

/* mask of BT_RADIO */
static _UBYTE RS0_MMASK[] = {
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3F, 0xFC, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 
0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x3F, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* data of BT_RADIO */
static _UBYTE RS0_MDATA[] = {
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x10, 0x08, 0x20, 0x04, 0x20, 0x04, 0x40, 0x02, 0x40, 0x02, 
0x40, 0x02, 0x40, 0x02, 0x20, 0x04, 0x20, 0x04, 0x10, 0x08, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00};

/* color data of BT_RADIO */
static _UBYTE RS0_4CDATA[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x07, 0xF4, 0x0F, 0xFC, 0x0F, 0xFA, 0x1F, 0xFA, 
0x1F, 0xFA, 0x1F, 0xF2, 0x1F, 0xF4, 0x0F, 0xE4, 0x17, 0x88, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x07, 0xF4, 0x0F, 0xFC, 0x0F, 0xFA, 0x1F, 0xFA, 
0x1F, 0xFA, 0x1F, 0xF2, 0x1F, 0xF4, 0x0F, 0xE4, 0x17, 0x88, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x07, 0xF4, 0x0F, 0xFC, 0x0F, 0xFA, 0x1F, 0xFA, 
0x1F, 0xFA, 0x1F, 0xF2, 0x1F, 0xF4, 0x0F, 0xE4, 0x17, 0x88, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x10, 0x08, 0x20, 0x0C, 0x20, 0x04, 0x40, 0x06, 0x40, 0x06, 
0x40, 0x06, 0x40, 0x0E, 0x20, 0x0C, 0x20, 0x1C, 0x18, 0x78, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* color mask of BT_RADIO */
static _UBYTE RS0_4CMASK[] = {
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3F, 0xFC, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 
0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x3F, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* selected data of BT_RADIO */
static _UBYTE RS0_4SDATA[] = {
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x11, 0xE8, 0x27, 0xF0, 0x2D, 0xB8, 0x4B, 0xD8, 0x5F, 0xF8, 
0x5F, 0xF8, 0x5B, 0xD0, 0x3D, 0xB0, 0x2F, 0xE0, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x11, 0xE8, 0x27, 0xF0, 0x2D, 0xB8, 0x4B, 0xD8, 0x5F, 0xF8, 
0x5F, 0xF8, 0x5B, 0xD0, 0x3D, 0xB0, 0x2F, 0xE0, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x11, 0xE8, 0x27, 0xF0, 0x2D, 0xB8, 0x4B, 0xD8, 0x5F, 0xF8, 
0x5F, 0xF8, 0x5B, 0xD0, 0x3D, 0xB0, 0x2F, 0xE0, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1E, 0x18, 0x38, 0x04, 0x33, 0xC4, 0x77, 0xE2, 0x67, 0xE2, 
0x67, 0xE2, 0x67, 0xE2, 0x23, 0xC4, 0x30, 0x04, 0x10, 0x08, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00};

/* selected mask of BT_RADIO */
static _UBYTE RS0_4SMASK[] = {
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3F, 0xFC, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 
0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x3F, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* color data of BT_RADIO */
static _UBYTE RS0_1CDATA[] = {
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x10, 0x08, 0x20, 0x04, 0x20, 0x04, 0x40, 0x02, 0x40, 0x02, 
0x40, 0x02, 0x40, 0x02, 0x20, 0x04, 0x20, 0x04, 0x10, 0x08, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00};

/* color mask of BT_RADIO */
static _UBYTE RS0_1CMASK[] = {
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3F, 0xFC, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 
0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x3F, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* selected data of BT_RADIO */
static _UBYTE RS0_1SDATA[] = {
0x00, 0x00, 0x03, 0xC0, 0x0C, 0x30, 0x10, 0x08, 0x23, 0xC4, 0x27, 0xE4, 0x4F, 0xF2, 0x4F, 0xF2, 
0x4F, 0xF2, 0x4F, 0xF2, 0x27, 0xE4, 0x23, 0xC4, 0x10, 0x08, 0x0C, 0x30, 0x03, 0xC0, 0x00, 0x00};

/* selected mask of BT_RADIO */
static _UBYTE RS0_1SMASK[] = {
0x00, 0x00, 0x03, 0xC0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3F, 0xFC, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 
0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x3F, 0xFC, 0x1F, 0xF8, 0x0F, 0xF0, 0x03, 0xC0, 0x00, 0x00};

/* mask of BT_CHECK */
static _UBYTE RS1_MMASK[] = {
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00};

/* data of BT_CHECK */
static _UBYTE RS1_MDATA[] = {
0xFF, 0xFE, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 
0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0xFF, 0xFE, 0x00, 0x00};

/* color data of BT_CHECK */
static _UBYTE RS1_4CDATA[] = {
0x00, 0x02, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 
0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 
0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 
0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x7F, 0xFC, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x7F, 0xFE, 0x00, 0x00};

/* color mask of BT_CHECK */
static _UBYTE RS1_4CMASK[] = {
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00};

/* selected data of BT_CHECK */
static _UBYTE RS1_4SDATA[] = {
0x00, 0x02, 0x7F, 0xFC, 0x3F, 0xF8, 0x5F, 0xF4, 0x6F, 0xEC, 0x77, 0xDC, 0x7B, 0xBC, 0x7D, 0x7C, 
0x7E, 0xFC, 0x7D, 0x7C, 0x7B, 0xBC, 0x77, 0xDC, 0x6F, 0xEC, 0x5F, 0xF4, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x7F, 0xFC, 0x3F, 0xF8, 0x5F, 0xF4, 0x6F, 0xEC, 0x77, 0xDC, 0x7B, 0xBC, 0x7D, 0x7C, 
0x7E, 0xFC, 0x7D, 0x7C, 0x7B, 0xBC, 0x77, 0xDC, 0x6F, 0xEC, 0x5F, 0xF4, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x7F, 0xFC, 0x3F, 0xF8, 0x5F, 0xF4, 0x6F, 0xEC, 0x77, 0xDC, 0x7B, 0xBC, 0x7D, 0x7C, 
0x7E, 0xFC, 0x7D, 0x7C, 0x7B, 0xBC, 0x77, 0xDC, 0x6F, 0xEC, 0x5F, 0xF4, 0x80, 0x00, 0x00, 0x00, 
0xFF, 0xFC, 0xC0, 0x04, 0xE0, 0x0C, 0xB0, 0x18, 0x98, 0x30, 0x8C, 0x60, 0x86, 0xC0, 0x83, 0x80, 
0x83, 0x80, 0x86, 0xC0, 0x8C, 0x60, 0x98, 0x30, 0xB0, 0x18, 0xE0, 0x0C, 0x00, 0x00, 0x00, 0x00};

/* selected mask of BT_CHECK */
static _UBYTE RS1_4SMASK[] = {
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00};

/* color data of BT_CHECK */
static _UBYTE RS1_1CDATA[] = {
0xFF, 0xFE, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 
0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x02, 0xFF, 0xFE, 0x00, 0x00};

/* color mask of BT_CHECK */
static _UBYTE RS1_1CMASK[] = {
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00};

/* selected data of BT_CHECK */
static _UBYTE RS1_1SDATA[] = {
0xFF, 0xFE, 0xC0, 0x06, 0xA0, 0x0A, 0x90, 0x12, 0x88, 0x22, 0x84, 0x42, 0x82, 0x82, 0x81, 0x02, 
0x82, 0x82, 0x84, 0x42, 0x88, 0x22, 0x90, 0x12, 0xA0, 0x0A, 0xC0, 0x06, 0xFF, 0xFE, 0x00, 0x00};

/* selected mask of BT_CHECK */
static _UBYTE RS1_1SMASK[] = {
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 
0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFE, 0x00, 0x00};

/* mask of BT_RLOW */
static _UBYTE RS2_MMASK[] = {
0x0F, 0xF0, 0x3F, 0xFC, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xF0};

/* data of BT_RLOW */
static _UBYTE RS2_MDATA[] = {
0x0F, 0xF0, 0x38, 0x1C, 0x60, 0x06, 0xC0, 0x03, 0xC0, 0x03, 0x60, 0x06, 0x38, 0x1C, 0x0F, 0xF0};

/* color data of BT_RLOW */
static _UBYTE RS2_1CDATA[] = {
0x0F, 0xF0, 0x38, 0x1C, 0x60, 0x06, 0xC0, 0x03, 0xC0, 0x03, 0x60, 0x06, 0x38, 0x1C, 0x0F, 0xF0};

/* color mask of BT_RLOW */
static _UBYTE RS2_1CMASK[] = {
0x0F, 0xF0, 0x3F, 0xFC, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xF0};

/* selected data of BT_RLOW */
static _UBYTE RS2_1SDATA[] = {
0x0F, 0xF0, 0x38, 0x1C, 0x63, 0xC6, 0xCF, 0xF3, 0xCF, 0xF3, 0x63, 0xC6, 0x38, 0x1C, 0x0F, 0xF0};

/* selected mask of BT_RLOW */
static _UBYTE RS2_1SMASK[] = {
0x0F, 0xF0, 0x3F, 0xFC, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xF0};

/* color data of BT_RLOW */
static _UBYTE RS2_4CDATA[] = {
0x00, 0x30, 0x00, 0xEC, 0x0F, 0xFA, 0x1F, 0xFA, 0x0F, 0xF2, 0x07, 0x8C, 0x0F, 0xF0, 0x00, 0x00, 
0x00, 0x30, 0x00, 0xEC, 0x0F, 0xFA, 0x1F, 0xFA, 0x0F, 0xF2, 0x07, 0x8C, 0x0F, 0xF0, 0x00, 0x00, 
0x00, 0x30, 0x00, 0xEC, 0x0F, 0xFA, 0x1F, 0xFA, 0x0F, 0xF2, 0x07, 0x8C, 0x0F, 0xF0, 0x00, 0x00, 
0x0F, 0xF0, 0x30, 0x1C, 0x40, 0x06, 0x40, 0x06, 0x40, 0x0E, 0x30, 0x7C, 0x0F, 0xF0, 0x00, 0x00};

/* color mask of BT_RLOW */
static _UBYTE RS2_4CMASK[] = {
0x0F, 0xF0, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xF0, 0x00, 0x00};

/* selected data of BT_RLOW */
static _UBYTE RS2_4SDATA[] = {
0x0F, 0xF0, 0x33, 0xE0, 0x4D, 0xB0, 0x5B, 0xD8, 0x5D, 0xB0, 0x37, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x0F, 0xF0, 0x33, 0xE0, 0x4D, 0xB0, 0x5B, 0xD8, 0x5D, 0xB0, 0x37, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x0F, 0xF0, 0x33, 0xE0, 0x4D, 0xB0, 0x5B, 0xD8, 0x5D, 0xB0, 0x37, 0x00, 0x0C, 0x00, 0x00, 0x00, 
0x0F, 0xF0, 0x3C, 0x0C, 0x73, 0xC2, 0x67, 0xE2, 0x63, 0xC2, 0x38, 0x0C, 0x0F, 0xF0, 0x00, 0x00};

/* selected mask of BT_RLOW */
static _UBYTE RS2_4SMASK[] = {
0x0F, 0xF0, 0x3F, 0xFC, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x3F, 0xFC, 0x0F, 0xF0, 0x00, 0x00};

/* mask of BT_CLOW */
static _UBYTE RS3_MMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

/* data of BT_CLOW */
static _UBYTE RS3_MDATA[] = {
0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF};

/* color data of BT_CLOW */
static _UBYTE RS3_1CDATA[] = {
0xFF, 0xFF, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xFF, 0xFF};

/* color mask of BT_CLOW */
static _UBYTE RS3_1CMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

/* selected data of BT_CLOW */
static _UBYTE RS3_1SDATA[] = {
0xFF, 0xFF, 0xB0, 0x0D, 0x8C, 0x31, 0x83, 0xC1, 0x83, 0xC1, 0x8C, 0x31, 0xB0, 0x0D, 0xFF, 0xFF};

/* selected mask of BT_CLOW */
static _UBYTE RS3_1SMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

/* color data of BT_CLOW */
static _UBYTE RS3_4CDATA[] = {
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x7F, 0xFF};

/* color mask of BT_CLOW */
static _UBYTE RS3_4CMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

/* selected data of BT_CLOW */
static _UBYTE RS3_4SDATA[] = {
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0x00, 0x01, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x80, 0x00, 
0xFF, 0xFE, 0xF0, 0x06, 0x8C, 0x18, 0x83, 0xE0, 0x83, 0xE0, 0x8C, 0x18, 0xF0, 0x06, 0x00, 0x00};

/* selected mask of BT_CLOW */
static _UBYTE RS3_4SMASK[] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};


static BITBLK rs_bitblk[NUM_BB] = {
	{ CP IMAGE0, 4, 32, 0, 0, 4 },
	{ CP IMAGE1, 4, 32, 0, 0, 4 },
	{ CP IMAGE2, 4, 32, 0, 0, 4 },
	{ CP IMAGE3, 4, 32, 0, 0, 2 }
};


static CICON rs_cicon[] = {
	{ 4, (_WORD *) RS0_4CDATA, (_WORD *) RS0_4CMASK, (_WORD *) RS0_4SDATA, (_WORD *) RS0_4SMASK, &rs_cicon[1] },
	{ 1, (_WORD *) RS0_1CDATA, (_WORD *) RS0_1CMASK, (_WORD *) RS0_1SDATA, (_WORD *) RS0_1SMASK, 0 },
	{ 4, (_WORD *) RS1_4CDATA, (_WORD *) RS1_4CMASK, (_WORD *) RS1_4SDATA, (_WORD *) RS1_4SMASK, &rs_cicon[3] },
	{ 1, (_WORD *) RS1_1CDATA, (_WORD *) RS1_1CMASK, (_WORD *) RS1_1SDATA, (_WORD *) RS1_1SMASK, 0 },
	{ 1, (_WORD *) RS2_1CDATA, (_WORD *) RS2_1CMASK, (_WORD *) RS2_1SDATA, (_WORD *) RS2_1SMASK, &rs_cicon[5] },
	{ 4, (_WORD *) RS2_4CDATA, (_WORD *) RS2_4CMASK, (_WORD *) RS2_4SDATA, (_WORD *) RS2_4SMASK, 0 },
	{ 1, (_WORD *) RS3_1CDATA, (_WORD *) RS3_1CMASK, (_WORD *) RS3_1SDATA, (_WORD *) RS3_1SMASK, &rs_cicon[7] },
	{ 4, (_WORD *) RS3_4CDATA, (_WORD *) RS3_4CMASK, (_WORD *) RS3_4SDATA, (_WORD *) RS3_4SMASK, 0 }
};


static CICONBLK rs_ciconblk[] = {
	{ { (_WORD *) RS0_MMASK, (_WORD *) RS0_MDATA, inline_string_19, 4096,0,0, 0,0,16,16, 5,5,6,8 }, &rs_cicon[0] }, /* BT_RADIO */
	{ { (_WORD *) RS1_MMASK, (_WORD *) RS1_MDATA, inline_string_20, 4096,0,0, 0,0,16,16, 5,5,6,8 }, &rs_cicon[2] }, /* BT_CHECK */
	{ { (_WORD *) RS2_MMASK, (_WORD *) RS2_MDATA, inline_string_21, 4096,0,0, 0,0,16,8, 5,1,6,8 }, &rs_cicon[4] }, /* BT_RLOW */
	{ { (_WORD *) RS3_MMASK, (_WORD *) RS3_MDATA, inline_string_22, 4096,0,0, 0,0,16,8, 5,1,6,8 }, &rs_cicon[6] } /* BT_CLOW */
};



#define RSC_HAS_PALETTE 1
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if (RSC_STATIC_FILE && RSC_NAMED_FUNCTIONS) || RSC_USE_PALETTE
#if RSC_USE_PALETTE && !RSC_NAMED_FUNCTIONS && RSC_STATIC_FILE
_WORD rgb_palette[][4] = {
#else
static _WORD rgb_palette[][4] = {
#endif
	{ 0x03E8, 0x03E8, 0x03E8, 0x0000 },
	{ 0x03B5, 0x0000, 0x0000, 0x0002 },
	{ 0x0000, 0x0386, 0x0000, 0x0003 },
	{ 0x03E8, 0x03E8, 0x0000, 0x0006 },
	{ 0x0000, 0x0000, 0x03B5, 0x0004 },
	{ 0x0386, 0x00C8, 0x0258, 0x0007 },
	{ 0x0066, 0x031C, 0x02DD, 0x0005 },
	{ 0x0353, 0x0353, 0x0353, 0x0008 },
	{ 0x01F6, 0x01F6, 0x01F6, 0x0009 },
	{ 0x01F6, 0x0000, 0x0000, 0x000A },
	{ 0x0000, 0x01F6, 0x0000, 0x000B },
	{ 0x02CA, 0x027B, 0x00E0, 0x000E },
	{ 0x0000, 0x0000, 0x01F6, 0x000C },
	{ 0x01F6, 0x0000, 0x01F6, 0x000F },
	{ 0x0000, 0x01F6, 0x01F6, 0x000D },
	{ 0x0000, 0x0000, 0x00C8, 0x0010 },
	{ 0x0000, 0x0000, 0x0190, 0x0011 },
	{ 0x0000, 0x0000, 0x0258, 0x0012 },
	{ 0x0000, 0x0000, 0x0320, 0x0013 },
	{ 0x0000, 0x0000, 0x03E8, 0x0014 },
	{ 0x0000, 0x00C8, 0x0000, 0x0015 },
	{ 0x0000, 0x00C8, 0x00C8, 0x0016 },
	{ 0x0000, 0x00C8, 0x0190, 0x0017 },
	{ 0x0000, 0x00C8, 0x0258, 0x0018 },
	{ 0x0000, 0x00C8, 0x0320, 0x0019 },
	{ 0x0000, 0x00C8, 0x03E8, 0x001A },
	{ 0x0000, 0x0190, 0x0000, 0x001B },
	{ 0x0000, 0x0190, 0x00C8, 0x001C },
	{ 0x0000, 0x0190, 0x0190, 0x001D },
	{ 0x0000, 0x0190, 0x0258, 0x001E },
	{ 0x0000, 0x0190, 0x0320, 0x001F },
	{ 0x0000, 0x0190, 0x03E8, 0x0020 },
	{ 0x0000, 0x0258, 0x0000, 0x0021 },
	{ 0x0000, 0x0258, 0x00C8, 0x0022 },
	{ 0x0000, 0x0258, 0x0190, 0x0023 },
	{ 0x0000, 0x0258, 0x0258, 0x0024 },
	{ 0x0000, 0x0258, 0x0320, 0x0025 },
	{ 0x0000, 0x0258, 0x03E8, 0x0026 },
	{ 0x0000, 0x0320, 0x0000, 0x0027 },
	{ 0x0000, 0x0320, 0x00C8, 0x0028 },
	{ 0x0000, 0x0320, 0x0190, 0x0029 },
	{ 0x0000, 0x0320, 0x0258, 0x002A },
	{ 0x0000, 0x0320, 0x0320, 0x002B },
	{ 0x0000, 0x0320, 0x03E8, 0x002C },
	{ 0x0000, 0x03E8, 0x0000, 0x002D },
	{ 0x0000, 0x03E8, 0x00C8, 0x002E },
	{ 0x0000, 0x03E8, 0x0190, 0x002F },
	{ 0x0000, 0x03E8, 0x0258, 0x0030 },
	{ 0x0000, 0x03E8, 0x0320, 0x0031 },
	{ 0x0000, 0x03E8, 0x03E8, 0x0032 },
	{ 0x00C8, 0x0000, 0x0000, 0x0033 },
	{ 0x00C8, 0x0000, 0x00C8, 0x0034 },
	{ 0x00C8, 0x0000, 0x0190, 0x0035 },
	{ 0x00C8, 0x0000, 0x0258, 0x0036 },
	{ 0x00C8, 0x0000, 0x0320, 0x0037 },
	{ 0x00C8, 0x0000, 0x03E8, 0x0038 },
	{ 0x00C8, 0x00C8, 0x0000, 0x0039 },
	{ 0x00C8, 0x00C8, 0x00C8, 0x003A },
	{ 0x00C8, 0x00C8, 0x0190, 0x003B },
	{ 0x0000, 0x0000, 0x02F1, 0x003C },
	{ 0x00C8, 0x00C8, 0x0320, 0x003D },
	{ 0x00C8, 0x00C8, 0x03E8, 0x003E },
	{ 0x00C8, 0x0190, 0x0000, 0x003F },
	{ 0x00C8, 0x0190, 0x00C8, 0x0040 },
	{ 0x00C8, 0x0190, 0x0190, 0x0041 },
	{ 0x00C8, 0x0190, 0x0258, 0x0042 },
	{ 0x00C8, 0x0190, 0x0320, 0x0043 },
	{ 0x00C8, 0x0190, 0x03E8, 0x0044 },
	{ 0x00C8, 0x0258, 0x0000, 0x0045 },
	{ 0x00C8, 0x0258, 0x00C8, 0x0046 },
	{ 0x00C8, 0x0258, 0x0190, 0x0047 },
	{ 0x00C8, 0x0258, 0x0258, 0x0048 },
	{ 0x00C8, 0x0258, 0x0320, 0x0049 },
	{ 0x00C8, 0x0258, 0x03E8, 0x004A },
	{ 0x00C8, 0x0320, 0x0000, 0x004B },
	{ 0x00C8, 0x0320, 0x00C8, 0x004C },
	{ 0x00C8, 0x0320, 0x0190, 0x004D },
	{ 0x00C8, 0x0320, 0x0258, 0x004E },
	{ 0x00C8, 0x0320, 0x0320, 0x004F },
	{ 0x00C8, 0x0320, 0x03E8, 0x0050 },
	{ 0x00C8, 0x03E8, 0x0000, 0x0051 },
	{ 0x00C8, 0x03E8, 0x00C8, 0x0052 },
	{ 0x00C8, 0x03E8, 0x0190, 0x0053 },
	{ 0x00C8, 0x03E8, 0x0258, 0x0054 },
	{ 0x00C8, 0x03E8, 0x0320, 0x0055 },
	{ 0x00C8, 0x03E8, 0x03E8, 0x0056 },
	{ 0x0190, 0x0000, 0x0000, 0x0057 },
	{ 0x0190, 0x0000, 0x00C8, 0x0058 },
	{ 0x0190, 0x0000, 0x0190, 0x0059 },
	{ 0x0190, 0x0000, 0x0258, 0x005A },
	{ 0x0190, 0x0000, 0x0320, 0x005B },
	{ 0x0190, 0x0000, 0x03E8, 0x005C },
	{ 0x0190, 0x00C8, 0x0000, 0x005D },
	{ 0x0190, 0x00C8, 0x00C8, 0x005E },
	{ 0x0190, 0x00C8, 0x0190, 0x005F },
	{ 0x0190, 0x00C8, 0x0258, 0x0060 },
	{ 0x0190, 0x00C8, 0x0320, 0x0061 },
	{ 0x0190, 0x00C8, 0x03E8, 0x0062 },
	{ 0x0190, 0x0190, 0x0000, 0x0063 },
	{ 0x0190, 0x0190, 0x00C8, 0x0064 },
	{ 0x0190, 0x0190, 0x0190, 0x0065 },
	{ 0x0190, 0x0190, 0x0258, 0x0066 },
	{ 0x0190, 0x0190, 0x0320, 0x0067 },
	{ 0x0190, 0x0190, 0x03E8, 0x0068 },
	{ 0x0190, 0x0258, 0x0000, 0x0069 },
	{ 0x0190, 0x0258, 0x00C8, 0x006A },
	{ 0x0190, 0x0258, 0x0190, 0x006B },
	{ 0x0190, 0x0258, 0x0258, 0x006C },
	{ 0x0190, 0x0258, 0x0320, 0x006D },
	{ 0x0190, 0x0258, 0x03E8, 0x006E },
	{ 0x0190, 0x0320, 0x0000, 0x006F },
	{ 0x0190, 0x0320, 0x00C8, 0x0070 },
	{ 0x0190, 0x0320, 0x0190, 0x0071 },
	{ 0x0190, 0x0320, 0x0258, 0x0072 },
	{ 0x0190, 0x0320, 0x0320, 0x0073 },
	{ 0x0190, 0x0320, 0x03E8, 0x0074 },
	{ 0x0190, 0x03E8, 0x0000, 0x0075 },
	{ 0x0190, 0x03E8, 0x00C8, 0x0076 },
	{ 0x0190, 0x03E8, 0x0190, 0x0077 },
	{ 0x0190, 0x03E8, 0x0258, 0x0078 },
	{ 0x0190, 0x03E8, 0x0320, 0x0079 },
	{ 0x0190, 0x03E8, 0x03E8, 0x007A },
	{ 0x0258, 0x0000, 0x0000, 0x007B },
	{ 0x0258, 0x0000, 0x00C8, 0x007C },
	{ 0x0258, 0x0000, 0x0190, 0x007D },
	{ 0x0258, 0x0000, 0x0258, 0x007E },
	{ 0x0258, 0x0000, 0x0320, 0x007F },
	{ 0x0258, 0x0000, 0x03E8, 0x0080 },
	{ 0x0258, 0x00C8, 0x0000, 0x0081 },
	{ 0x0258, 0x00C8, 0x00C8, 0x0082 },
	{ 0x0258, 0x00C8, 0x0190, 0x0083 },
	{ 0x0258, 0x00C8, 0x0258, 0x0084 },
	{ 0x0258, 0x00C8, 0x0320, 0x0085 },
	{ 0x0258, 0x00C8, 0x03E8, 0x0086 },
	{ 0x0258, 0x0190, 0x0000, 0x0087 },
	{ 0x0258, 0x0190, 0x00C8, 0x0088 },
	{ 0x0258, 0x0190, 0x0190, 0x0089 },
	{ 0x0258, 0x0190, 0x0258, 0x008A },
	{ 0x0258, 0x0190, 0x0320, 0x008B },
	{ 0x0258, 0x0190, 0x03E8, 0x008C },
	{ 0x0258, 0x0258, 0x0000, 0x008D },
	{ 0x0258, 0x0258, 0x00C8, 0x008E },
	{ 0x0258, 0x0258, 0x0190, 0x008F },
	{ 0x0258, 0x0258, 0x0258, 0x0090 },
	{ 0x0258, 0x0258, 0x0320, 0x0091 },
	{ 0x0258, 0x0258, 0x03E8, 0x0092 },
	{ 0x0258, 0x0320, 0x0000, 0x0093 },
	{ 0x0258, 0x0320, 0x00C8, 0x0094 },
	{ 0x0258, 0x0320, 0x0190, 0x0095 },
	{ 0x0258, 0x0320, 0x0258, 0x0096 },
	{ 0x0258, 0x0320, 0x0320, 0x0097 },
	{ 0x0258, 0x0320, 0x03E8, 0x0098 },
	{ 0x0258, 0x03E8, 0x0000, 0x0099 },
	{ 0x0258, 0x03E8, 0x00C8, 0x009A },
	{ 0x0258, 0x03E8, 0x0190, 0x009B },
	{ 0x0258, 0x03E8, 0x0258, 0x009C },
	{ 0x0258, 0x03E8, 0x0320, 0x009D },
	{ 0x0258, 0x03E8, 0x03E8, 0x009E },
	{ 0x0320, 0x0000, 0x0000, 0x009F },
	{ 0x0320, 0x0000, 0x00C8, 0x00A0 },
	{ 0x0320, 0x0000, 0x0190, 0x00A1 },
	{ 0x0320, 0x0000, 0x0258, 0x00A2 },
	{ 0x0320, 0x0000, 0x0320, 0x00A3 },
	{ 0x0320, 0x0000, 0x03E8, 0x00A4 },
	{ 0x0320, 0x00C8, 0x0000, 0x00A5 },
	{ 0x0320, 0x00C8, 0x00C8, 0x00A6 },
	{ 0x0320, 0x00C8, 0x0190, 0x00A7 },
	{ 0x0320, 0x00C8, 0x0258, 0x00A8 },
	{ 0x0320, 0x00C8, 0x0320, 0x00A9 },
	{ 0x0320, 0x00C8, 0x03E8, 0x00AA },
	{ 0x0320, 0x0190, 0x0000, 0x00AB },
	{ 0x0320, 0x0190, 0x00C8, 0x00AC },
	{ 0x0320, 0x0190, 0x0190, 0x00AD },
	{ 0x0320, 0x0190, 0x0258, 0x00AE },
	{ 0x0320, 0x0190, 0x0320, 0x00AF },
	{ 0x0320, 0x0190, 0x03E8, 0x00B0 },
	{ 0x0320, 0x0258, 0x0000, 0x00B1 },
	{ 0x0320, 0x0258, 0x00C8, 0x00B2 },
	{ 0x0320, 0x0258, 0x0190, 0x00B3 },
	{ 0x0320, 0x0258, 0x0258, 0x00B4 },
	{ 0x0320, 0x0258, 0x0320, 0x00B5 },
	{ 0x0320, 0x0258, 0x03E8, 0x00B6 },
	{ 0x0320, 0x0320, 0x0000, 0x00B7 },
	{ 0x0320, 0x0320, 0x00C8, 0x00B8 },
	{ 0x0320, 0x0320, 0x0190, 0x00B9 },
	{ 0x0320, 0x0320, 0x0258, 0x00BA },
	{ 0x0320, 0x0320, 0x0320, 0x00BB },
	{ 0x0320, 0x0320, 0x03E8, 0x00BC },
	{ 0x0320, 0x03E8, 0x0000, 0x00BD },
	{ 0x0320, 0x03E8, 0x00C8, 0x00BE },
	{ 0x0320, 0x03E8, 0x0190, 0x00BF },
	{ 0x0320, 0x03E8, 0x0258, 0x00C0 },
	{ 0x0320, 0x03E8, 0x0320, 0x00C1 },
	{ 0x0320, 0x03E8, 0x03E8, 0x00C2 },
	{ 0x03E8, 0x0000, 0x0000, 0x00C3 },
	{ 0x03E8, 0x0000, 0x00C8, 0x00C4 },
	{ 0x03E8, 0x0000, 0x0190, 0x00C5 },
	{ 0x03E8, 0x0000, 0x0258, 0x00C6 },
	{ 0x03E8, 0x0000, 0x0320, 0x00C7 },
	{ 0x03E8, 0x0000, 0x03E8, 0x00C8 },
	{ 0x03E8, 0x00C8, 0x0000, 0x00C9 },
	{ 0x03E8, 0x00C8, 0x00C8, 0x00CA },
	{ 0x03E8, 0x00C8, 0x0190, 0x00CB },
	{ 0x03E8, 0x00C8, 0x0258, 0x00CC },
	{ 0x03E8, 0x00C8, 0x0320, 0x00CD },
	{ 0x03E8, 0x00C8, 0x03E8, 0x00CE },
	{ 0x03E8, 0x0190, 0x0000, 0x00CF },
	{ 0x03E8, 0x0190, 0x00C8, 0x00D0 },
	{ 0x03E8, 0x0190, 0x0190, 0x00D1 },
	{ 0x03E8, 0x0190, 0x0258, 0x00D2 },
	{ 0x03E8, 0x0190, 0x0320, 0x00D3 },
	{ 0x03E8, 0x0190, 0x03E8, 0x00D4 },
	{ 0x03E8, 0x0258, 0x0000, 0x00D5 },
	{ 0x03E8, 0x0258, 0x00C8, 0x00D6 },
	{ 0x03E8, 0x0258, 0x0190, 0x00D7 },
	{ 0x03E8, 0x0258, 0x0258, 0x00D8 },
	{ 0x03E8, 0x0258, 0x0320, 0x00D9 },
	{ 0x03E8, 0x0258, 0x03E8, 0x00DA },
	{ 0x03E8, 0x0320, 0x0000, 0x00DB },
	{ 0x03E8, 0x0320, 0x00C8, 0x00DC },
	{ 0x03E8, 0x0320, 0x0190, 0x00DD },
	{ 0x03E8, 0x0320, 0x0258, 0x00DE },
	{ 0x03E8, 0x0320, 0x0320, 0x00DF },
	{ 0x03E8, 0x0320, 0x03E8, 0x00E0 },
	{ 0x03E8, 0x03E8, 0x0000, 0x00E1 },
	{ 0x03E8, 0x03E8, 0x00C8, 0x00E2 },
	{ 0x03E8, 0x03E8, 0x0190, 0x00E3 },
	{ 0x03E8, 0x03E8, 0x0258, 0x00E4 },
	{ 0x03E8, 0x03E8, 0x0320, 0x00E5 },
	{ 0x03B5, 0x0000, 0x0000, 0x00E6 },
	{ 0x0386, 0x0000, 0x0000, 0x00E7 },
	{ 0x02F1, 0x0000, 0x0000, 0x00E8 },
	{ 0x02BE, 0x0000, 0x0000, 0x00E9 },
	{ 0x01F6, 0x0000, 0x0000, 0x00EA },
	{ 0x012E, 0x0000, 0x0000, 0x00EB },
	{ 0x0066, 0x0000, 0x0000, 0x00EC },
	{ 0x0000, 0x03B5, 0x0000, 0x00ED },
	{ 0x0000, 0x0386, 0x0000, 0x00EE },
	{ 0x0000, 0x02F1, 0x0000, 0x00EF },
	{ 0x0000, 0x02BE, 0x0000, 0x00F0 },
	{ 0x0000, 0x01F6, 0x0000, 0x00F1 },
	{ 0x0000, 0x012E, 0x0000, 0x00F2 },
	{ 0x0000, 0x0066, 0x0000, 0x00F3 },
	{ 0x0000, 0x0000, 0x0066, 0x00F4 },
	{ 0x0000, 0x0000, 0x012E, 0x00F5 },
	{ 0x0000, 0x0000, 0x01F6, 0x00F6 },
	{ 0x0000, 0x0000, 0x02BE, 0x00F7 },
	{ 0x00C8, 0x00C8, 0x0258, 0x00F8 },
	{ 0x0000, 0x0000, 0x0386, 0x00F9 },
	{ 0x03B5, 0x03B5, 0x03B5, 0x00FA },
	{ 0x0386, 0x0386, 0x0386, 0x00FB },
	{ 0x02F1, 0x02F1, 0x02F1, 0x00FC },
	{ 0x02BE, 0x02BE, 0x02BE, 0x00FD },
	{ 0x012E, 0x012E, 0x012E, 0x00FE },
	{ 0x0066, 0x0066, 0x0066, 0x00FF },
	{ 0x0000, 0x0000, 0x0000, 0x0001 }
};
#endif


static TEDINFO rs_tedinfo[NUM_TI] = {
	{ inline_string_11, inline_string_12, inline_string_13, IBM, 0, TE_LEFT, 0x1180, 0x0, 0, 4,1 }, /* AT_DEZ */
	{ inline_string_15, inline_string_16, inline_string_17, IBM, 0, TE_LEFT, 0x1180, 0x0, 0, 5,1 } /* AT_HEX */
};


static OBJECT rs_object[NUM_OBS] = {
/* ALERTBOX */

	{ -1, 1, 13, G_BOX, OF_FL3DBAK, OS_OUTLINED, C_UNION(0x21100L), 0,0, 51,9 },
	{ 2, -1, -1, G_STRING, OF_NONE, 0xFF40, C_UNION(inline_string_0), 0,0, 20,1 }, /* AL_TITLE */
	{ 3, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[0]), 1025,2049, 8192,8192 }, /* AL_INFO */
	{ 4, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[1]), 1025,2049, 8192,8192 }, /* AL_ACHT */
	{ 5, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[2]), 1025,2049, 8192,8192 }, /* AL_QST */
	{ 6, -1, -1, G_IMAGE, OF_NONE, OS_NORMAL, C_UNION(&rs_bitblk[3]), 1025,2049, 8192,8192 }, /* AL_STOP */
	{ 7, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_1), 1031,2049, 40,1 }, /* AL_STR1 */
	{ 8, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_2), 1031,2050, 40,1 }, /* AL_STR2 */
	{ 9, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_3), 1031,2051, 40,1 }, /* AL_STR3 */
	{ 10, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_4), 1031,2052, 40,1 }, /* AL_STR4 */
	{ 11, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_5), 1031,2053, 40,1 }, /* AL_STR5 */
	{ 12, -1, -1, G_BUTTON, 0x605, OS_WHITEBAK, C_UNION(inline_string_6), 6,7, 15,257 }, /* AL_BUT1 */
	{ 13, -1, -1, G_BUTTON, 0x605, OS_WHITEBAK, C_UNION(inline_string_7), 20,7, 15,257 }, /* AL_BUT2 */
	{ 0, -1, -1, G_BUTTON, 0x625, OS_WHITEBAK, C_UNION(inline_string_8), 34,7, 15,257 }, /* AL_BUT3 */

/* ASCIITAB */

	{ -1, 1, 7, G_BOX, OF_FL3DBAK, OS_OUTLINED, C_UNION(0x21180L), 0,0, 42,2071 },
	{ 2, -1, -1, G_STRING, OF_NONE, 0xFF40, C_UNION(inline_string_9), 2,2048, 14,1 }, /* AT_TITLE */
	{ 3, -1, -1, G_IBOX, OF_NONE, OS_NORMAL, C_UNION(0x11100L), 2,2, 38,19 }, /* AT_BOX */
	{ 4, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_10), 4,2069, 4,1 },
	{ 5, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[0]), 9,2069, 1028,1 }, /* AT_DEZ */
	{ 6, -1, -1, G_STRING, OF_NONE, OS_NORMAL, C_UNION(inline_string_14), 15,2069, 4,1 },
	{ 7, -1, -1, G_TEXT, OF_FL3DBAK, OS_NORMAL, C_UNION(&rs_tedinfo[1]), 20,2069, 1028,1 }, /* AT_HEX */
	{ 0, -1, -1, G_BUTTON, 0xE25, OS_NORMAL, C_UNION(inline_string_18), 1052,2069, 1032,1 }, /* AT_ABBRUCH */

/* BUTTONS */

	{ -1, 1, 4, G_BOX, OF_NONE, OS_OUTLINED, C_UNION(0x21178L), 0,0, 14,5 },
	{ 2, -1, -1, G_CICON, OF_NONE, OS_NORMAL, C_UNION(&rs_ciconblk[0]), 4,1, 4096,4096 }, /* BT_RADIO */
	{ 3, -1, -1, G_CICON, OF_NONE, OS_NORMAL, C_UNION(&rs_ciconblk[1]), 4,3, 4096,4096 }, /* BT_CHECK */
	{ 4, -1, -1, G_CICON, OF_NONE, OS_NORMAL, C_UNION(&rs_ciconblk[2]), 8,1025, 4096,2304 }, /* BT_RLOW */
	{ 0, -1, -1, G_CICON, OF_LASTOB, OS_NORMAL, C_UNION(&rs_ciconblk[3]), 8,1027, 4096,2304 } /* BT_CLOW */
};


static OBJECT *rs_trindex[NUM_TREE] = {
	&rs_object[0], /* ALERTBOX */
	&rs_object[14], /* ASCIITAB */
	&rs_object[22] /* BUTTONS */
};





#if RSC_STATIC_FILE

#if RSC_NAMED_FUNCTIONS
#ifdef __STDC__
_WORD inline_rsc_load(void)
#else
_WORD inline_rsc_load()
#endif
{
#ifndef RSC_HAS_PALETTE
#  define RSC_HAS_PALETTE 0
#endif
#ifndef RSC_USE_PALETTE
#  define RSC_USE_PALETTE 0
#endif
#if RSC_HAS_PALETTE || RSC_USE_PALETTE
	W_Cicon_Setpalette(&rgb_palette[0][0]);
#endif
#if NUM_OBS != 0
	{
		_WORD Obj;
		OBJECT *tree;
		_WORD wchar, hchar;
		GetTextSize(&wchar, &hchar);
		for (Obj = 0, tree = rs_object; Obj < NUM_OBS; Obj++, tree++)
		{
			tree->ob_x = wchar * (tree->ob_x & 0xff) + (tree->ob_x >> 8);
			tree->ob_y = hchar * (tree->ob_y & 0xff) + (tree->ob_y >> 8);
			tree->ob_width = wchar * (tree->ob_width & 0xff) + (tree->ob_width >> 8);
			tree->ob_height = hchar * (tree->ob_height & 0xff) + (tree->ob_height >> 8);
		}
		hfix_objs(NULL, rs_object, NUM_OBS);
	}
#endif
	return 1;
}


#ifdef __STDC__
_WORD inline_rsc_gaddr(_WORD type, _WORD idx, void *gaddr)
#else
_WORD inline_rsc_gaddr(type, idx, gaddr)
_WORD type;
_WORD idx;
void *gaddr;
#endif
{
	switch (type)
	{
#if NUM_TREE != 0
	case R_TREE:
		if (idx < 0 || idx >= NUM_TREE)
			return 0;
		*((OBJECT **)gaddr) = rs_trindex[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBJECT:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((OBJECT **)gaddr) = &rs_object[idx];
		break;
#endif
#if NUM_TI != 0
	case R_TEDINFO:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((TEDINFO **)gaddr) = &rs_tedinfo[idx];
		break;
#endif
#if NUM_IB != 0
	case R_ICONBLK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((ICONBLK **)gaddr) = &rs_iconblk[idx];
		break;
#endif
#if NUM_BB != 0
	case R_BITBLK:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((BITBLK **)gaddr) = &rs_bitblk[idx];
		break;
#endif
#if NUM_FRSTR != 0
	case R_STRING:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char **)gaddr) = (char *)(rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_IMAGEDATA:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK **)gaddr) = rs_frimg[idx];
		break;
#endif
#if NUM_OBS != 0
	case R_OBSPEC:
		if (idx < 0 || idx >= NUM_OBS)
			return 0;
		*((_LONG **)gaddr) = &rs_object[idx].ob_spec.index;
		break;
#endif
#if NUM_TI != 0
	case R_TEPTEXT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptext);
		break;
#endif
#if NUM_TI != 0
	case R_TEPTMPLT:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_ptmplt);
		break;
#endif
#if NUM_TI != 0
	case R_TEPVALID:
		if (idx < 0 || idx >= NUM_TI)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_tedinfo[idx].te_pvalid);
		break;
#endif
#if NUM_IB != 0
	case R_IBPMASK:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pmask);
		break;
#endif
#if NUM_IB != 0
	case R_IBPDATA:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_pdata);
		break;
#endif
#if NUM_IB != 0
	case R_IBPTEXT:
		if (idx < 0 || idx >= NUM_IB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_iconblk[idx].ib_ptext);
		break;
#endif
#if NUM_BB != 0
	case R_BIPDATA:
		if (idx < 0 || idx >= NUM_BB)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_bitblk[idx].bi_pdata);
		break;
#endif
#if NUM_FRSTR != 0
	case R_FRSTR:
		if (idx < 0 || idx >= NUM_FRSTR)
			return 0;
		*((char ***)gaddr) = (char **)(&rs_frstr[idx]);
		break;
#endif
#if NUM_FRIMG != 0
	case R_FRIMG:
		if (idx < 0 || idx >= NUM_FRIMG)
			return 0;
		*((BITBLK ***)gaddr) = &rs_frimg[idx];
		break;
#endif
	default:
		return 0;
	}
	return 1;
}


#ifdef __STDC__
_WORD inline_rsc_free(void)
#else
_WORD inline_rsc_free()
#endif
{
#if NUM_OBS != 0
	hrelease_objs(rs_object, NUM_OBS);
#endif
	return 1;
}

#endif /* RSC_NAMED_FUNCTIONS */

#else /* !RSC_STATIC_FILE */
#if 0
int rs_numstrings = 23;
int rs_numfrstr = 0;

int rs_nuser = 0;
int rs_numimages = 4;
int rs_numbb = 4;
int rs_numfrimg = 0;
int rs_numib = 0;
int rs_numcib = 4;
int rs_numti = 2;
int rs_numobs = 27;
int rs_numtree = 3;

char rs_name[] = "inline.rsc";

int _rsc_format = 2; /* RSC_FORM_SOURCE2 */
#endif
#endif /* RSC_STATIC_FILE */
